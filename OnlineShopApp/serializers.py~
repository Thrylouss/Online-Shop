from djoser.serializers import UserCreateSerializer, UserSerializer

from .models import *
from rest_framework import serializers


class CustomUserSerializer(UserCreateSerializer):
    password = serializers.CharField(write_only=True, required=False, allow_blank=True)  # Делаем необязательным

    class Meta(UserCreateSerializer.Meta):
        model = CustomUser
        fields = ("id", "username", "full_name", "email", "town", "district")

    def create(self, validated_data):
        password = validated_data.pop("password", None)  # Извлекаем пароль, если есть
        user = CustomUser.objects.create(**validated_data)
        if password:
            user.set_password(password)  # Если пароль указан, устанавливаем его
        else:
            user.set_unusable_password()  # Если пароля нет, делаем его недоступным
        user.save()
        return user


class ProductImageSerializer(serializers.ModelSerializer):
    class Meta:
        model = ProductImage
        fields = '__all__'


class ProductSerializer(serializers.ModelSerializer):
    images = ProductImageSerializer(many=True, read_only=True)

    class Meta:
        model = Product
        fields = '__all__'


class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = '__all__'


class NewsSerializer(serializers.ModelSerializer):
    class Meta:
        model = News
        fields = '__all__'


class OrderItemSerializer(serializers.ModelSerializer):
    product = ProductSerializer(read_only=True)

    class Meta:
        model = OrderItem
        fields = '__all__'


class OrderSerializer(serializers.ModelSerializer):
    items = OrderItemSerializer(source='order_items', many=True, read_only=True)  # Используем related_name

    class Meta:
        model = Order
        fields = '__all__'


class BasketItemSerializer(serializers.ModelSerializer):
    product = ProductSerializer(read_only=True)
    product_id = serializers.PrimaryKeyRelatedField(
        queryset=Product.objects.all(),
        source='product',
        write_only=True  # Позволяет отправлять product_id, но не отображать в ответе
    )

    class Meta:
        model = BasketItem
        fields = ['id', 'user', 'product', 'product_id', 'amount', 'created_at', 'updated_at']
        read_only_fields = ['user', 'product', 'created_at', 'updated_at']